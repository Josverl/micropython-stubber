# This workflow will :
# - test the workstation scripts
# - test the createstubs on  multiple micropyton linux versions
# - test the minified createstubs on  multiple micropyton linux versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest
on:
  workflow_dispatch:
  # push:
  # paths:
  #   - 'board/**'
  #   - "src/**"
  #   - "tests/**"
  #   - "snippets/**"
  #   - "pyproject.toml"
  #   - "poetry.lock"
  #   - "pyrightconfig.json"

  pull_request:
    branches: [main]

jobs:
  run_tests:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          - os: macos-latest
            python-version: "3.9" # avoid black install problem for this version
          - os: macos-latest
            python-version: "3.10" # avoid black install problem for this version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Number of commits to fetch. 0 indicates all history for all branches and tags.

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: josverl

      #----------------------------------------------
      # poetry is not in the default image
      #----------------------------------------------
      - name: Install poetry
        run: pipx install poetry==1.3.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      #----------------------------------------------
      # install project
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install --with dev --no-interaction

      #----------------------------------------------
      # stubber clone
      # repos needed for tests
      #----------------------------------------------
      - name: stubber clone
        run: poetry run stubber clone --add-stubs

      - name: create or update minified version
        run: |
          poetry run stubber minify --all --compile

      - name: Test with pytest
        if: always()
        run: |
          poetry run coverage run -m pytest tests -m "not basicgit" --junitxml=results/test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml

      # - name: Coverage lcov
      #   if: always() # ignore previous error
      #   run: |
      #     poetry run coverage lcov -o results/coverage-${{ matrix.python-version }}-${{ matrix.os }}.lcov

      # - name: Coverage xml
      #   if: always() # ignore previous error
      #   run: |
      #     poetry run coverage lcov -o results/coverage-${{ matrix.python-version }}-${{ matrix.os }}.lcov

      #----------------------------------------------
      # upload coverage stats
      # .lcov to  artefacts (available for download)
      # .XML  to Codecov
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        if: always() # ignore previous error
        with:
          path: results/
          name: results-${{ matrix.python-version }}-${{ matrix.os }}

      # - name: Upload coverage
      #   if: always() # ignore previous error
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: results/coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml
      #     fail_ci_if_error: false

      - name: Push result to Testspace server
        if: always() # ignore previous error
        run: |
          testspace [tests/${{ matrix.os }}/Python_${{ matrix.python-version }}]results/test-results-*.xml --link codecov
