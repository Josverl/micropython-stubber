# This workflow will :
# - test the workstation scripts
# - test the createstubs on  multiple micropyton linux versions
# - test the minified createstubs on  multiple micropyton linux versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest
on:
  workflow_dispatch:
  push:
  pull_request:
  #   branches: [ main ]

jobs:
  run_tests:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]       
        python-version: ["3.7", "3.8", "3.9"]
        # TODO : support python "3.10" - rshell > pyreadline 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "true"
          fetch-depth: 0
          # Number of commits to fetch. 0 indicates all history for all branches and tags.

      # - name: Extract branch name
      #   id: extract_branch
      #   shell: bash
      #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: restore Python from cache
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pylint
          pip install -r requirements-dev.txt

      - name: flag tools executable (on linux) 
        if: runner.os == 'Linux'
        run: |
          chmod +x $GITHUB_WORKSPACE/tests/tools/* --recursive --verbose
          MICROPYPATH=./board ./tests/tools/ubuntu_20_04/micropython_v1_16 -c "import sys;print(sys.path);import logging"

      - name: create or update minified version
        run: |
          python process.py minify

      - name: run test on minified/createstubs.by
        run: |
          pytest -m minified

      - name: verify minified using pylint
        run: |
          pylint minified/createstubs.py -E -d E0401,E1101,E0213,E0602,E1121,E0211
          # CPython/Micropython Errors 
          # E0401: Unable to import '<upythonmodule>' (import-error)
          # E1101: Module 'gc' has no 'mem_free' member (no-member)
          # errors by minification 
          # E0211: Method has no argument (no-method-argument)
          # E1121: Too many positional arguments for method call (too-many-function-args)
          # E0213: Method should have "self" as first argument (no-self-argument)
          # E0602: Undefined variable (undefined-variable)

      - name: Test with pytest
        run: pytest tests -m "not basicgit" --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (Python ${{ matrix.python-version }})
          path: junit/test-results*.xml

      # # https://github.com/marketplace/actions/publish-unit-test-results
      # - name: Publish Unit Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v1
      #   if: always()
      #   with:
      #     files: junit/test-results*.xml

      # - name: Upload pytest test results
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: pytest-results-${{ matrix.python-version }}
      #     path: junit/test-results-${{ matrix.python-version }}.xml
      #   # Use always() to always run this step to publish test results when there are test failures
      #   if: always()

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: run_tests
    runs-on: ubuntu-latest
    # the run_tests job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml