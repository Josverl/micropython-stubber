# This workflow will :
# - test the workstation scripts
# - test the createstubs on  multiple micropyton linux versions
# - test the minified createstubs on  multiple micropyton linux versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'readme.md'
      - 'changelog.md'

  pull_request:
    branches: [ main ]

jobs:
  run_tests:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]
        # TODO : support python "3.10" - rshell > pyreadline

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "true"
          fetch-depth: 0
          # Number of commits to fetch. 0 indicates all history for all branches and tags.

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: josverl

      # - name: Extract branch name
      #   id: extract_branch
      #   shell: bash
      #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: restore Python from cache
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}

      - name: PIP Install basics
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          pip install pytest

      - name: POETRY Install dependencies
        run: |
          poetry install --no-interaction      - name: create or update minified version
        shell: pwsh
        run: |
          scripts/minify.ps1

      - name: flag tools executable (on linux)
        if: runner.os == 'Linux'
        run: |
          chmod +x $GITHUB_WORKSPACE/tests/tools/* --recursive --verbose
          MICROPYPATH=./board ./tests/tools/ubuntu_20_04/micropython_v1_18 -c "import sys;print(sys.path);import logging"

      - name: create or update minified version
        shell: pwsh
        run: |
          scripts/minify.ps1

      - name: Test with pytest
        if: always()
        run: |
          coverage run -m pytest tests -m "not basicgit" --junitxml=results/test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml
          coverage xml -o results/coverage.xml


      - name: Push result to Testspace server
        if: always()
        run: |
          testspace [tests/${{ matrix.os }}/Python_${{ matrix.python-version }}]results/test-results-*.xml
          testspace --link codecov results/coverage.xml
