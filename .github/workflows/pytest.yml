# This workflow will :
# - test the workstation scripts 
# - test the createstubs on  multiple micropyton linux versions
# - test the minified createstubs on  multiple micropyton linux versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest tests/common

on:
  workflow_dispatch:
  push:
  pull_request:
  #   branches: [ master ]


jobs:
  run_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # - name: Extract branch name
    #   id: extract_branch
    #   shell: bash
    #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: flag tools executable
      run: |
        chmod +x $GITHUB_WORKSPACE/tools/* -v
        MICROPYPATH=./board ./tools/micropython -c "import sys;print(sys.path);import logging" 

    - name: create or update minified version
      run: |
        python process.py minify

    - name: verify minified using pylint
      run: |
        pylint minified/createstubs.py -E -d E0401,E1101
        # ignore Unable to import '<upythonmodule>' (import-error)
        # ignore Module 'gc' has no 'mem_free' member (no-member)

    - name: Test with pytest
      run: pytest tests/common tests/board --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml

    - name: report code coverage
      uses: codecov/codecov-action@v1
      with:
        file: junit/test-results-${{ matrix.python-version }}.xml
        name: codecov-umbrella # optional
        verbose: true # optional (default = false)      
      if: ${{ always() }}
             

    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
