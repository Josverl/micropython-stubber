# This workflow will :
# - test the workstation scripts
# - test the createstubs on  multiple micropyton linux versions
# - test the minified createstubs on  multiple micropyton linux versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest
on:
  workflow_dispatch:
  pull_request:
    branches: [main]

  push:
    branches: [main, dev/*, feat/*, fix/*]
    paths:
      - "src/**"
      - "tests/**"
      - "**/pyproject.toml"
      - "**/poetry.lock"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run_tests:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      JUPYTER_PLATFORM_DIRS: "1"
      # fix:  DeprecationWarning: Jupyter is migrating its paths to use standard platformdirs

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          - os: macos-latest
            python-version: "3.9" # avoid black install problem for this version
          - os: macos-latest
            python-version: "3.10" # avoid black install problem for this version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Number of commits to fetch. 0 indicates all history for all branches and tags.

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: josverl

      #----------------------------------------------
      # poetry is not in the default image
      #----------------------------------------------
      - name: Install poetry
        run: pipx install poetry==1.3.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      #----------------------------------------------
      # install project
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install --with dev --no-interaction

      #----------------------------------------------
      # stubber clone
      # repos needed for tests
      #----------------------------------------------
      - name: stubber clone
        run: poetry run stubber clone --add-stubs

      - name: Test mpflash
        if: always()
        run: poetry run coverage run -m pytest -m "mpflash" --junitxml=results/mpflash-coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml

      - name: Upload mpflash coverage.xml to Codecov
        if: always() # ignore previous error
        uses: codecov/codecov-action@v4
        with:
          file: results/results/mpflash-coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml
          flags: mpflash
          fail_ci_if_error: false

      - name: Test stubber
        if: always()
        run: |
          # poetry run coverage erase
          poetry run coverage run -m pytest -m "stubber" --junitxml=results/stubber-coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml

      - name: Upload stubber coverage.xml to Codecov
        if: always() # ignore previous error
        uses: codecov/codecov-action@v4
        with:
          file: results/stubber-coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml
          flags: stubber
          fail_ci_if_error: false

      #----------------------------------------------
      # upload coverage stats
      # .XML  to Codecov
      #----------------------------------------------

      - name: Push result to Testspace server
        if: always() # ignore previous error
        run: |
          testspace [tests/${{ matrix.os }}/Python_${{ matrix.python-version }}]results/*.xml --link codecov

      - uses: actions/upload-artifact@v4
        if: always() # ignore previous error
        with:
          path: results/
          name: results-${{ matrix.python-version }}-${{ matrix.os }}
