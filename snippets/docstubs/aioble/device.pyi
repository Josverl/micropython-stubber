from .core import ble as ble, log_error as log_error, register_irq_handler as register_irq_handler
from typing import Any

_IRQ_MTU_EXCHANGED: Any

class DeviceDisconnectedError(Exception): ...

def _device_irq(event, data) -> None: ...

class DeviceTimeout:
    _connection: Any
    _timeout_ms: Any
    _timeout_task: Any
    _task: Any
    def __init__(self, connection, timeout_ms) -> None: ...
    async def _timeout_sleep(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_traceback) -> None: ...

class Device:
    addr_type: Any
    addr: Any
    _connection: Any
    def __init__(self, addr_type, addr) -> None: ...
    def __eq__(self, rhs): ...
    def __hash__(self): ...
    def __str__(self): ...
    def addr_hex(self): ...
    async def connect(self, timeout_ms: int = ...): ...

class DeviceConnection:
    _connected: Any
    device: Any
    encrypted: bool
    authenticated: bool
    bonded: bool
    key_size: bool
    mtu: Any
    _conn_handle: Any
    _event: Any
    _mtu_event: Any
    _discover: Any
    _characteristics: Any
    _task: Any
    _timeouts: Any
    _pair_event: Any
    _l2cap_channel: Any
    def __init__(self, device) -> None: ...
    async def device_task(self) -> None: ...
    def _run_task(self) -> None: ...
    async def disconnect(self, timeout_ms: int = ...) -> None: ...
    async def disconnected(self, timeout_ms: int = ..., disconnect: bool = ...) -> None: ...
    async def service(self, uuid, timeout_ms: int = ...): ...
    def services(self, uuid: Any | None = ..., timeout_ms: int = ...): ...
    async def pair(self, *args, **kwargs) -> None: ...
    def is_connected(self): ...
    def timeout(self, timeout_ms): ...
    async def exchange_mtu(self, mtu: Any | None = ...): ...
    async def l2cap_accept(self, psm, mtu, timeout_ms: Any | None = ...): ...
    async def l2cap_connect(self, psm, mtu, timeout_ms: int = ...): ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_traceback) -> None: ...
