# make_stub_files: Tue 23 Apr 2019 at 22:26:29

from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
def delay(ms: smallint) -> None: ...
def udelay(us: smallint) -> None: ...
def millis() -> None: ...
def micros() -> None: ...
def elapsed_millis(start: Any) -> None: ...
def elapsed_micros(start: Any) -> None: ...
def hard_reset() -> None: ...
def bootloader() -> None: ...
def disable_irq() -> None: ...
def enable_irq(state: Any=bool) -> None: ...
def freq(sysclk: Any, hclk: Any, pclk1: Any, pclk2: Any) -> None: ...
def wfi() -> None: ...
def stop() -> None: ...
def standby() -> None: ...
def info(dump_alloc_table: Any) -> None: ...
def main(filename: str) -> None: ...
def mount(device: Any, mountpoint: Any, readonly: Any=bool, mkfs: Any=bool) -> None: ...
def repl_uart(uart: Any) -> None: ...
def rng() -> None: ...
def sync() -> None: ...
def unique_id() -> None: ...
def usb_mode(modestr: Any, vid: Any=61525, pid: Any=38913, hid: Any=0) -> None: ...
class Accel:
    def filtered_xyz(self) -> None: ...
    def tilt(self) -> None: ...
    def x(self) -> None: ...
    def y(self) -> None: ...
    def z(self) -> None: ...
    def write(self, register: Any, value: Any) -> None: ...
    def read(self, register: Any) -> None: ...
class ADC:
    def __init__(self, pin: machine.Pin.pin) -> None: ...
    def read_timed_stop(self) -> None: ...
    def read(self) -> None: ...
    def read_timed(self, buf: Any, timer: Any) -> None: ...
class CAN:
    def __init__(self, bus: Any, mode: Any=None, extframe: Any=bool, prescaler: Any=100, sjw: Any=1, bs1: Any=6, bs2: Any=8) -> None: ...
    def initfilterbanks(cls: Any, nr: Any) -> None: ...
    def init(self, mode: Any, extframe: Any=bool, prescaler: Any=100, sjw: Any=1, bs1: Any=6, bs2: Any=8) -> None: ...
    def deinit(self) -> None: ...
    def setfilter(self, bank: Any, mode: Any, fifo: Any, params: Any, rtr: Any) -> None: ...
    def clearfilter(self, bank: Any) -> None: ...
    def any(self, fifo: Any) -> None: ...
    def recv(self, fifo: Any, timeout: Any=5000) -> None: ...
    def send(self, data: Any, id: Any, timeout: Any=0, rtr: Any=bool) -> None: ...
    def rxcallback(self, fifo: Any, fun: Any) -> None: ...
class DAC:
    def __init__(self, port: Any, bits: Any=8) -> None: ...
    def init(self, bits: Any=8) -> None: ...
    def deinit(self) -> None: ...
    def noise(self, freq: Any) -> None: ...
    def triangle(self, freq: Any) -> None: ...
    def write(self, value: Any) -> None: ...
    def write_timed(self, data: Any, freq: Any, mode: Any=NORMAL) -> None: ...
class ExtInt:
    def __init__(self, pin: machine.Pin.pin, mode: Any, pull: Any, callback: Any) -> None: ...
    def regs(cls: Any) -> None: ...
    def disable(self) -> None: ...
    def enable(self) -> None: ...
    def line(self) -> None: ...
    def swint(self) -> None: ...
class I2C:
    def __init__(self, *args, **kwargs) -> None: ...
    def deinit(self) -> None: ...
    def init(self, mode: Any, addr: Any=18, baudrate: smallint=400000, gencall: Any=bool) -> None: ...
    def is_ready(self, addr: Any) -> None: ...
    def mem_read(self, data: Any, addr: Any, memaddr: Any, timeout: Any=5000, addr_size: smallint=8) -> None: ...
    def mem_write(self, data: Any, addr: Any, memaddr: Any, timeout: Any=5000, addr_size: smallint=8) -> None: ...
    def recv(self, recv: Any, addr: Any=0, timeout: Any=5000) -> None: ...
    def send(self, send: Any, addr: Any=0, timeout: Any=5000) -> None: ...
    def scan(self) -> None: ...
class LCD:
    def __init__(self, skin_position: Any) -> None: ...
    def command(self, instr_data: Any, buf: Any) -> None: ...
    def contrast(self, value: Any) -> None: ...
    def fill(self, colour: Any) -> None: ...
    def get(self, x: Any, y: Any) -> None: ...
    def light(self, value: Any) -> None: ...
    def pixel(self, x: Any, y: Any, colour: Any) -> None: ...
    def show(self) -> None: ...
    def text(self, str: Any, x: Any, y: Any, colour: Any) -> None: ...
    def write(self, str: Any) -> None: ...
class LED:
    def __init__(self, id: Any) -> None: ...
    def intensity(self, value: Any) -> None: ...
    def off(self) -> None: ...
    def on(self) -> None: ...
    def toggle(self) -> None: ...
    def __getattr__(self, *args, **kwargs) -> number: ...
class Pin:
    def __init__(self, *args, **kwargs) -> None: ...
    def debug(cls: Any, state: Any) -> None: ...
    def dict(cls: Any, dict: Any) -> None: ...
    def mapper(cls: Any, fun: Any) -> None: ...
    def init(self, mode: Any, pull: Any=PULL_NONE, af: Any=-1) -> None: ...
    def value(self, value: Any) -> None: ...
    def __str__(self) -> None: ...
    def af(self) -> None: ...
    def af_list(self, cls: Any) -> None: ...
    def gpio(self) -> None: ...
    def mode(self) -> None: ...
    def name(self) -> None: ...
    def names(self) -> None: ...
    def pin(self) -> None: ...
    def port(self) -> None: ...
    def pull(self) -> None: ...
class PinAF:
    def __str__(self) -> None: ...
    def index(self) -> None: ...
    def name(self) -> None: ...
    def reg(self) -> None: ...
class RTC:
    def __init__(self) -> None: ...
    def datetime(self, datetimetuple: Any) -> None: ...
    def wakeup(self, timeout: Any, callback: Any=None) -> None: ...
    def info(self) -> None: ...
    def calibration(self, cal: Any) -> None: ...
class Servo:
    def __init__(self, id: Any) -> None: ...
    def angle(self, angle: Any, time: Any=0) -> None: ...
    def speed(self, speed: Any, time: Any=0) -> None: ...
    def pulse_width(self, value: Any) -> None: ...
    def calibration(self, pulse_min: smallint, pulse_max: smallint, pulse_centre: smallint, pulse_angle_90: smallint, pulse_speed_100: smallint) -> None: ...
class SPI:
    def __init__(self, bus: Any) -> None: ...
    def deinit(self) -> None: ...
    def init(self, mode: Any, prescaler: Any, baudrate: smallint=328125, polarity: Any=1, phase: Any=0, bits: Any=8, firstbit: Any=MSB, ti: Any=bool, crc: Any=None) -> None: ...
    def recv(self, recv: Any, timeout: Any=5000) -> None: ...
    def send(self, send: Any, timeout: Any=5000) -> None: ...
    def send_recv(self, send: Any, recv: Any=None, timeout: Any=5000) -> None: ...
class Switch:
    def __init__(self) -> None: ...
    def __call__(self) -> None: ...
    def callback(self, fun: Any) -> None: ...
class Timer:
    def __init__(self, *args, **kwargs) -> None: ...
    def init(self, freq: Any, prescaler: Any, period: Any) -> None: ...
    def deinit(self) -> None: ...
    def callback(self, fun: Any) -> None: ...
    def channel(self, channel: Any, mode: Any) -> None: ...
    def counter(self, value: Any) -> None: ...
    def freq(self, value: Any) -> None: ...
    def period(self, value: Any) -> None: ...
    def prescaler(self, value: Any) -> None: ...
    def source_freq(self) -> None: ...
class TimerChannel:
    def callback(self, fun: Any) -> None: ...
    def capture(self, value: Any) -> None: ...
    def compare(self, value: Any) -> None: ...
    def pulse_width(self, value: Any) -> None: ...
    def pulse_width_percent(self, value: Any) -> None: ...
class UART:
    def __init__(self, bus: Any) -> None: ...
    def init(self, baudrate: smallint, bits: Any=8, parity: Any=None, stop: Any=1, timeout: Any=1000, flow: Any=None, timeout_char: smallint=0, read_buf_len: smallint=64) -> None: ...
    def deinit(self) -> None: ...
    def any(self) -> None: ...
    def writechar(self, char: smallint) -> None: ...
    def read(self, nbytes: smallint) -> None: ...
    def readchar(self) -> None: ...
    def readinto(self, buf: Any, nbytes: smallint) -> None: ...
    def readline(self) -> None: ...
    def write(self, buf: Any) -> None: ...
    def sendbreak(self) -> None: ...
class USB_HID:
    def recv(self, data: Any, timeout: Any=5000) -> None: ...
    def send(self, data: Any) -> None: ...
class USB_VCP:
    def __init__(self) -> None: ...
    def setinterrupt(self, chr: smallint) -> None: ...
    def isconnected(self) -> None: ...
    def any(self) -> None: ...
    def close(self) -> None: ...
    def read(self, nbytes: smallint) -> None: ...
    def readinto(self, buf: Any, maxlen: smallint) -> None: ...
    def readline(self) -> None: ...
    def readlines(self) -> None: ...
    def write(self, buf: Any) -> None: ...
    def recv(self, data: Any, timeout: Any=5000) -> None: ...
    def send(self, data: Any, timeout: Any=5000) -> None: ...
