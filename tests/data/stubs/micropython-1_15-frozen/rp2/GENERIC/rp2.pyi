from _rp2 import *
from typing import Any, Optional

_PROG_DATA: Any
_PROG_OFFSET_PIO0: Any
_PROG_OFFSET_PIO1: Any
_PROG_EXECCTRL: Any
_PROG_SHIFTCTRL: Any
_PROG_OUT_PINS: Any
_PROG_SET_PINS: Any
_PROG_SIDESET_PINS: Any
_PROG_MAX_FIELDS: Any

class PIOASMError(Exception): ...

class PIOASMEmit:
    labels: Any = ...
    prog: Any = ...
    wrap_used: bool = ...
    sideset_count: int = ...
    def __init__(self, *, out_init: Optional[Any] = ..., set_init: Optional[Any] = ..., sideset_init: Optional[Any] = ..., in_shiftdir: int = ..., out_shiftdir: int = ..., autopush: bool = ..., autopull: bool = ..., push_thresh: int = ..., pull_thresh: int = ..., fifo_join: int = ...) -> None: ...
    delay_max: int = ...
    sideset_opt: Any = ...
    pass_: Any = ...
    num_instr: int = ...
    num_sideset: int = ...
    def start_pass(self, pass_: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def delay(self, delay: Any): ...
    def side(self, value: Any): ...
    def wrap_target(self) -> None: ...
    def wrap(self) -> None: ...
    def label(self, label: Any) -> None: ...
    def word(self, instr: Any, label: Optional[Any] = ...): ...
    def nop(self): ...
    def jmp(self, cond: Any, label: Optional[Any] = ...): ...
    def wait(self, polarity: Any, src: Any, index: Any): ...
    def in_(self, src: Any, data: Any): ...
    def out(self, dest: Any, data: Any): ...
    def push(self, value: int = ..., value2: int = ...): ...
    def pull(self, value: int = ..., value2: int = ...): ...
    def mov(self, dest: Any, src: Any): ...
    def irq(self, mod: Any, index: Optional[Any] = ...): ...
    def set(self, dest: Any, data: Any): ...

_pio_funcs: Any

def asm_pio(**kw: Any): ...
def asm_pio_encode(instr: Any, sideset_count: Any): ...
