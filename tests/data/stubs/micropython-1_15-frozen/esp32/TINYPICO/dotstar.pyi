
from typing import Any, Dict, Optional, Sequence, Tuple, Union
Node = Any
class DotStar:
    def __init__(self, spi: Any, n: int) -> None: ...
    def deinit(self) -> None: ...
    def __enter__(self) -> Any: ...
        #   0: return self
        # ? 0: return self
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...
    def __repr__(self) -> Any: ...
        #   0: return +.join(str(x) for x in self)+
        # ? 0: return +.join(str(x) for x in self)+
    def _set_item(self, index: Any, value: Any) -> None: ...
    def __setitem__(self, index: Any, val: Any) -> None: ...
    def __getitem__(self, index: Any) -> Union[Any, Tuple[Any]]: ...
        #   0: return out
        # ? 0: return out
        #   1: return tuple(<gen self._buf[offset+-i+START_HEADER_SIZE] for i in range()>)
        #   1: return Tuple[<gen self._buf[offset+-int+START_HEADER_SIZE] for int in range()>]
    def __len__(self) -> Any: ...
        #   0: return self._n
        # ? 0: return self._n
    def brightness(self) -> Any: ...
        #   0: return self._brightness
        # ? 0: return self._brightness
    def brightness(self, brightness: Any) -> None: ...
    def fill(self, color: Any) -> None: ...
    def show(self) -> None: ...
