[tool.micropython-stubber]
stub-path = "./repos/micropython-stubs/stubs"
repo-path = "./repos"

# publish-path = "./repos/micropython-stubs/publish"
# template-path = "./repos/micropython-stubs/publish/template"


[tool.poetry]
name = "micropython-stubber"
version = "1.10.0"
description = "Tooling to create and maintain stubs for MicroPython"
authors = ["Jos Verlinde <jos_verlinde@hotmail.com>"]
license = "MIT"
readme = "readme.md"
keywords = ["Micropython", "stubs", "vscode", "static type check"]
documentation = "https://micropython-stubber.readthedocs.io/"
homepage = "https://github.com/Josverl/micropython-stubber#readme"
repository = "https://github.com/Josverl/micropython-stubber"
classifiers = [
    "Programming Language :: Python :: Implementation :: MicroPython",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Text Editors :: Integrated Development Environments (IDE)",
    "Topic :: Software Development :: Build Tools",
]
packages = [{ include = "**/*.*", from = "src" }]
include = []
exclude = [
    "**/tests/**",
    "**/*-test",
    "**/samples.py",
    "**/OneOff",
    "**/.vscode",

]

[tool.poetry.scripts]
stubber = "stubber.stubber:stubber_cli"
pyboard = "stubber.tools.pyboard:main"

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
python-minifier = "~2.7.0"
requests = "~2.28.0"
mypy = "^0.991"
mpy-cross = "1.19.1"
black = ">=22.10,<23.0"
libcst = "~0.4.9"
autoflake = ">=1.7,<2.0"
click = "~8.1.3"
importlib-metadata = { version = "~1.0", python = "<3.8" }
tomli = { version = "~2.0.1", python = "<3.11" }
typed-config = "~1.3.0"
packaging = "~21.3"
esptool = { version = "~4.4", optional = true }
pyserial = { version = "~3.5", optional = true }
mpremote = { version = ">=0.4.0", optional = true }
pysondb-v2 = "~2.1.0"
tomli-w = "~1.0.0"
loguru = "~0.6.0"
PyGithub = "~1.57"
tabulate = "~0.9.0"
pypi-simple = "~1.0.0"
[tool.poetry.extras]
tools = ["mpremote", "esptool", "pyserial"]

[tool.poetry.dev-dependencies]
pytest = "^7.1.2"
pytest-mock = "^3.10.0"
pytest-json-report = "~1.5.0"
pytest-metadata = "^2.0.2"
mock = "^4.0.3"
coverage = "^6.4.3"
pyright = "^1.1.265"
packaging = "~21.3"
distro = "~1.8.0"
pydeps = "^1.10.22"
pytest-github-actions-annotate-failures = "^0.1.7"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
# use long lines to avoid _log lines from wrapping , as this causes issues with the minification.
line-length = 140
target_version = ['py38']
include = '\.pyi?$'
exclude = '''
(
    /(
        | \..*
        | minified
        | micropython
        | micropython-lib
        | tests[\\/]mocks
        | scratch
    )/
)
'''

[tool.pytest.ini_options]
minversion = "7.0"
python_functions = ["test_", "*_test"]
python_files = ["test_*.py", "*_test.py"]
testpaths = ["tests", "src"]
junit_family = "xunit1"

# Remove pytest-cov
addopts = "-v -sv  -m 'not basicgit'"

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "basicgit: marks tests in the basicgit module that manipulate the checkout",
    "mocked: to replace/compensate for most of the slow and git tests",
    #
    "minified: marks test of the minified version of createstubs",
    "docfix: upstream documentation fix needed",
    "micropython: tests of MicroPython code on Cpython with mocks",
    "doc_stubs: tests to generate stubs from the rst documentation",
    "codemod: test libcst code modification",
    "cli: test command line interface",
    # os versions
    "win32: run test only on Windows",
    "linux: run test only on linux",
    "darwin: run test only on Mac",
]

# coverage reports
[tool.coverage.run]
parallel = false
branch = true
source = ["board", "src"]
omit = [
    # helper files in board
    "*/boot.py",
    "*/main.py",
    "*/stub_lvgl.py",

    "*/__init__.py",

    # minfied files should be excluded 
    # duplicate file names in different folders break the coverage reports
    "*/minified/*.py",

    # dev helper script in src
    "*/src/stubber/rst/report_return.py",
    "*/src/stubber/update_module_list.py",

    # not my code 
    "*/logging.py",
    "*/make_stub_files.py",
    "*/stubber/tools/*.py",


]


[tool.coverage.html]
directory = "coverage"

[tool.coverage.xml]
output = "results/coverage.xml"

[tool.coverage.json]
output = "results/coverage.json"

[tool.coverage.lcov]
output = "results/coverage.lcov"

[tool.coverage.report]
show_missing = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    "pragma: nocover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "self._log.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    "except subprocess.CalledProcessError as e:",
    "except OSError:",
    "except OSError as e:",
    "except OSError as e2:",
    "except (OSError, KeyError):",
    "except (OSError, AttributeError):",
    "except (OSError, KeyError, NameError):",
    "except KeyError:",
    "except AttributeError as e:",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # mind the quotes 
    'if __name__ == "__main__" or isMicroPython():',
    "main()",

    # utility functions
    "show_help()",
    "isMicroPython()",
    "read_path()",

    #unreachable
    # mind the quotes 
    'info["release"] = "2.0.0" ',
    "if arch",

    # Micropython detection
    "except (NotImplementedError, SyntaxError):",
    # catch error
    "except (OSError, KeyError):",
    "except (OSError, AttributeError):",

    # Backward compat <= 3.7 
    "if sys.version_info.major == 3 and sys.version_info.minor <= 7:",

]
