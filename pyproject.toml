[tool.black]
# use long lines to avoid _log lines from wrapping , as this causes issues with the minification.
line-length = 140
target_version = ['py38']
include = '\.pyi?$'
exclude = '''
(
    /(
        | \..*
        | minified
        | micropython
        | micropython-lib
        | tests[\\/]mocks
        | scratch
    )/
)
'''

[tool.pytest.ini_options]
junit_family = "xunit1"
# verbose
# super verbose 
# --cov coverage with json report and html report
# Skip 'basicgit' test to avoid changing the cheked-out repo branch
#addopts = "-v -sv --cov json --cov-report html -m 'not basicgit'"
#addopts = "-v --cov --cov-report html -m 'not basicgit'"
addopts = "-v -sv --cov --cov-report html --json-report --json-report-file coverage/report.json --json-report-indent=4"

testpaths = [
    "tests",
    "src",
]

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "basicgit: marks tests in the basicgit module that manipulate the checkout",
    "minified: marks test of the minified version of createstubs",
    "docfix: upstream documentation fix needed",
    "micropython: tests of MicroPython code on Cpython with mocks",
    "rst_stub: tests to generate stobs from the rst documentation",
    # os versions
    "win32: run test only on Windows",
    "linux: run test only on linux",
    "darwin: run test only on Mac",
]

# coverage reports
[tool.coverage.run]
parallel = false
branch = true
source = [
        "board",
        "minified",
        "src"
        ]
omit = [
        "*/commands/__init__.py",
        "*/boot.py",
        "*/main.py",
        "*/logging.py",
        "*/make_stub_files.py",
        "*/micropip.py"
        ]


[tool.coverage.html]
directory = "coverage"

[tool.coverage.xml]
output = "cov.xml"

[tool.coverage.json]
output = "coverage.json"

[tool.coverage.report]
show_missing = true
# Regexes for lines to exclude from consideration
exclude_lines = [ 
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",         # <-- Fix this 
    "self._log.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # mind the quotes 
    'if __name__ == "__main__" or isMicroPython():', 
    "main()",
    
    # utility functions
    "show_help()",
    "isMicroPython()",
    "read_path()",

    #unreachable
    # mind the quotes 
    'info["release"] = "2.0.0" ',
    "if arch",

    # Micropython detection
    "except (NotImplementedError, SyntaxError):",
    # catch error
    "except (OSError, KeyError):",
    "except (OSError, AttributeError):",

]