##########################################################################################
# Customize file classifications.                                                        #
# Results from files under any classifier will be excluded from LGTM                     #
# statistics.                                                                            #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  docs:
    # Identify the top-level file called `generate_javadoc.py` as documentation-related.
    #- generate_javadoc.py
  test:
    # Override LGTM's default classification of test files by excluding all files.
    - exclude: /
    # Classify all files in the top-level directories testsand and tools as test code.
    - tests
    - tools
    - "**/*_test.py"
    
  # The default behavior is to tag all files created during the
  # build as `generated`. Results are hidden for generated code. You can tag 
  # further files as being generated by adding them to the `generated` section.
  generated:
    - "minified/*.py"

  # The default behavior is to tag library code as `library`. Results are hidden 
  # for library code. You can tag further files as being library code by adding them
  # to the `library` section.

  # library:
  #   - exclude: "path/to/library/code/**/*.py"

  # The default behavior is to tag template files as `template`. Results are hidden 
  # for template files. You can tag further files as being template files by adding 
  # them to the `template` section.
  # template:
  #   - exclude: path/to/template/code/**/*.c

  # Define your own category, for example: 'some_custom_category'.
  some_custom_category:
    # Classify all files in the top-level directory tools/ (or the top-level file 
    # called tools).
    - tools

#########################################################################################
# Use the `queries` block to change the default display of query results.               #
#########################################################################################

queries:
  # Start by hiding the results of all queries.
  - exclude: "*"
  # Then include all queries tagged 'security' and 'correctness', and with a severity of
  # 'error'.
  - include:
      tags:
        - "security"
        - "correctness"           
      severity: "error"
  # # Specifically hide the results of two queries.
  # - exclude: cpp/use-of-goto
  # - exclude: java/equals-on-unrelated-types
  # # Refine by including the `java/command-line-injection` query.
  # - include: java/command-line-injection

#########################################################################################
# Define changes to the default code extraction process.                                #
# Each block configures the extraction of a single language, and modifies actions in a  #
# named step. Every named step includes automatic default actions,                      #
# except for the 'prepare' step. The steps are performed in the following sequence:     #
# prepare                                                                               #
# after_prepare                                                                         #
# configure (C/C++ only)                                                                #
# python_setup (Python only)                                                            #
# before_index                                                                          #
# index                                                                                 #
##########################################################################################

# The `index` step extracts information from the files in the codebase.
index:
  # Specify a list of files and folders to exclude from extraction.
  # Default: Git submodules and Subversion externals.
  exclude:
    - micropython
    - micropython-lib
  filters:
    - exclude: "**/documentation/examples/snippets/*.py"
    - include: "**/documentation/examples/test_application/*"
  include:
    - example/to/include


#########################################################################################
# Environment variables available to the steps:                                         #
#########################################################################################

# LGTM_SRC
#   The root of the source tree.
# LGTM_WORKSPACE
#   An existing (initially empty) folder outside the source tree.
#   Used for temporary download and setup commands.

#########################################################################################
# Use the extraction block to define changes to the default code extraction process     #
# for one or more languages. The settings for each language are defined in a child      #
# block, with one or more steps.                                                        #
#########################################################################################

  # # Define settings for Python analysis
  # ######################################
  # python:
  #   # The `prepare` step exists for customization on LGTM.com only.
  #   # prepare:
  #   #   # The `packages` section is valid for LGTM.com only. It names packages to
  #   #   # be installed.
  #   #   packages: libpng-dev
  #   # This step is useful for Python analysis where you want to prepare the 
  #   # environment for the `python_setup` step without changing the default behavior 
  #   # for that step.
  #   after_prepare:
  #     - export PATH=$LGTM_WORKSPACE/tools:$PATH
  #     # This sets up the Python interpreter and virtual environment, ready for the 
  #     # `index` step to extract the codebase.
  #   python_setup:
  #     # Specify packages that should NOT be installed despite being mentioned in the
  #     # requirements.txt file.
  #     # Default: no package marked for exclusion.
  #     exclude_requirements:
  #       - pywin32
  #     # Specify a list of pip packages to install.
  #     # If any of these packages cannot be installed, the extraction will fail.
  #     requirements:
  #       - Pillow
  #     # Specify a list of requirements text files to use to set up the environment,
  #     # or false for none. Default: any requirements.txt, test-requirements.txt,
  #     # and similarly named files identified in the codebase are used.
  #     requirements_files:
  #       - required-packages.txt
  #     # Specify a setup.py file to use to set up the environment, or false for none.
  #     # Default: any setup.py files identified in the codebase are used in preference
  #     # to any requirements text files.
  #     setup_py: new-setup.py
  #     # Override the version of the Python interpreter used for setup and extraction
  #     # Default: Python 3.
  #     version: 2
  #   # Optional step. You should add a `before_index` step if you need to run commands
  #   # before the `index` step.
  #   before_index:
  #     - antlr4 -Dlanguage=Python3 Grammar.g4
  #   # The `index` step extracts information from the files in the codebase.
  #   index:
  #     # Specify a list of files and folders to exclude from extraction.
  #     # Default: Git submodules and Subversion externals.
  #     exclude:
  #       - legacy-implementation
  #       - thirdparty/libs
  #     filters:
  #      - exclude: "**/documentation/examples/snippets/*.py"
  #      - include: "**/documentation/examples/test_application/*"
  #     include:
  #       - example/to/include
